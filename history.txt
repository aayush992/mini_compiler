%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Phase 3 Will add code generation functionality
typedef struct {
    char* name;
    int int_val;
    float float_val;
    int is_float;
} Symbol;

typedef struct {
    int int_val;
    float float_val;
    int is_float;
    char* temp_var;
} ExprValue;

Symbol symbol_table[100];
int sym_count = 0;
int temp_var_count = 0;
int label_count = 0;

void yyerror(const char *s);
int yylex(void);

char* new_temp() {
    char* temp = (char*)malloc(10);
    sprintf(temp, "t%d", temp_var_count++);
    return temp;
}

char* new_label() {
    char* label = (char*)malloc(10);
    sprintf(label, "L%d", label_count++);
    return label;
}

Symbol* find_symbol(char* name) {
    for(int i = 0; i < sym_count; i++) {
        if(strcmp(symbol_table[i].name, name) == 0) {
            return &symbol_table[i];
        }
    }
    return NULL;
}
%}

%union {
    int intval;
    float floatval;
    char* strval;
    struct {
        int int_val;
        float float_val;
        int is_float;
        char* temp_var;
    } exprval;
}

%token <strval> IDENTIFIER
%token <intval> NUMBER
%token <floatval> FLOAT_LITERAL
%token INT FLOAT IF ELSE RETURN WHILE FOR
%token '+' '-' '*' '/' '=' '<' '>' '(' ')' '{' '}' ';'

%type <exprval> expr
%type <intval> condition

%left '+' '-'
%left '*' '/'
%nonassoc UMINUS
%nonassoc IFX
%nonassoc ELSE

%%

program: statement_list;

statement_list: statement | statement_list statement;

statement:
      declaration ';'
    | assignment ';'
    | if_statement
    | while_loop
    | for_loop
    | return_statement ';'
    ;

declaration:
      INT IDENTIFIER '=' expr {
        printf("%s = %s\n", $2, $4.temp_var);
        printf("Declared int %s = %d\n", $2, $4.int_val);
        symbol_table[sym_count++] = (Symbol){strdup($2), $4.int_val, 0.0, 0};
    }
    | FLOAT IDENTIFIER '=' expr {
        printf("%s = %s\n", $2, $4.temp_var);
        float val = $4.is_float ? $4.float_val : (float)$4.int_val;
        printf("Declared float %s = %.2f\n", $2, val);
        symbol_table[sym_count++] = (Symbol){strdup($2), 0, val, 1};
    };

assignment:
    IDENTIFIER '=' expr {
        printf("%s = %s\n", $1, $3.temp_var);
        printf("Assigned %s = %s\n", $1, $3.temp_var);
    };

if_statement:
    IF '(' condition ')' '{' statement_list '}' {
        printf("If condition true\n");
    }
    | IF '(' condition ')' '{' statement_list '}' ELSE '{' statement_list '}' {
        printf("If-Else executed\n");
    };

while_loop:
    WHILE '(' condition ')' '{' statement_list '}' {
        printf("While loop executed\n");
    };

for_loop:
    FOR '(' assignment ';' condition ';' assignment ')' '{' statement_list '}' {
        printf("For loop executed\n");
    };

return_statement:
    RETURN expr {
        if($2.is_float)
            printf("Return %.2f\n", $2.float_val);
        else
            printf("Return %d\n", $2.int_val);
    };

condition:
      expr '>' expr { $$ = 1; printf("if %s > %s\n", $1.temp_var, $3.temp_var); }
    | expr '<' expr { $$ = 1; printf("if %s < %s\n", $1.temp_var, $3.temp_var); }
    | expr '=' expr { $$ = 1; printf("if %s == %s\n", $1.temp_var, $3.temp_var); }
    ;

expr:
      expr '+' expr {
        $$ = $1;
        if ($1.is_float || $3.is_float) {
            $$.is_float = 1;
            $$.float_val = ($1.is_float ? $1.float_val : $1.int_val) +
                           ($3.is_float ? $3.float_val : $3.int_val);
        } else {
            $$.int_val = $1.int_val + $3.int_val;
        }
        $$.temp_var = new_temp();
        printf("%s = %s + %s\n", $$.temp_var, $1.temp_var, $3.temp_var);
        // TODO Phase 3: Will add assembly code generation here
    }
    | NUMBER {
        $$.int_val = $1;
        $$.is_float = 0;
        $$.temp_var = new_temp();
        printf("%s = %d\n", $$.temp_var, $1);
    }
    | FLOAT_LITERAL {
        $$.float_val = $1;
        $$.is_float = 1;
        $$.temp_var = new_temp();
        printf("%s = %.2f\n", $$.temp_var, $1);
    }
    | IDENTIFIER {
        Symbol* s = find_symbol($1);
        $$.int_val = s ? s->int_val : 0;
        $$.float_val = s ? s->float_val : 0.0;
        $$.is_float = s ? s->is_float : 0;
        $$.temp_var = strdup($1);
    };

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
} 